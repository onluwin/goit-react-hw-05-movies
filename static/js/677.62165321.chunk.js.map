{"version":3,"file":"static/js/677.62165321.chunk.js","mappings":"mTAEMA,EAAS,mCAEfC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAc,mCAAG,+FACtBC,EADsB,qCACuBH,GADvB,SAELC,EAAAA,EAAAA,IAAUE,GAFL,uBAEpBC,EAFoB,EAEpBA,KAFoB,kBAGrBA,GAHqB,2CAAH,qDAMdC,EAAkB,mCAAG,WAAOC,EAAOC,GAAd,kFAC1BJ,EAD0B,+BACaH,EADb,kBAC6BM,GAD7B,SAETL,EAAAA,EAAAA,IAAUE,EAAc,CAAEI,OAAAA,IAFjB,uBAExBH,EAFwB,EAExBA,KAFwB,kBAGzBA,GAHyB,2CAAH,wDAMlBI,EAAiB,mCAAG,WAAOC,EAASF,GAAhB,kFACzBJ,EADyB,gBACDM,EADC,oBACkBT,GADlB,SAERC,EAAAA,EAAAA,IAAUE,EAAc,CAAEI,OAAAA,IAFlB,uBAEvBH,EAFuB,EAEvBA,KAFuB,kBAGxBA,GAHwB,2CAAH,wDAMjBM,EAAU,mCAAG,WAAOD,EAASF,GAAhB,kFAClBJ,EADkB,iBACOM,EADP,4BACkCT,GADlC,UAEDC,EAAAA,EAAAA,GAAME,EAAc,CAAEI,OAAAA,IAFrB,uBAEhBH,EAFgB,EAEhBA,KAFgB,kBAGjBA,GAHiB,2CAAH,wDAMVO,EAAY,mCAAG,WAAOF,EAASF,GAAhB,kFACpBJ,EADoB,iBACKM,EADL,4BACgCT,EADhC,wCAEHC,EAAAA,EAAAA,IAAUE,EAAc,CAAEI,OAAAA,IAFvB,uBAElBH,EAFkB,EAElBA,KAFkB,kBAGnBA,GAHmB,2CAAH,uD,sHCdzB,EAhBiB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KAClBQ,QAAQC,IAAI,OAAQT,GAGpB,OACE,wBACGA,EAAKU,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAApB,OACR,2BACE,gBAAKC,IAAG,UANA,8BAMA,YALH,QAKG,YAAwBD,GAAgBE,IAAKJ,KACrD,uBAAIA,KACJ,uCAAeC,OAHRD,EADD,KASf,ECVYK,EAAO,WAClB,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQd,GAAYe,EAAAA,EAAAA,MAAZf,QAYR,IAVAgB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBpB,EAASmB,EAAWnB,OAC1B,KACEG,EAAAA,EAAAA,IAAWD,EAASF,GAAQqB,KAAKL,GAAUM,MAAMjB,QAAQC,IAG1D,CAFC,MAAOiB,GACPlB,QAAQC,IAAIiB,EACb,CACD,OAAO,kBAAMJ,EAAWK,OAAjB,CACR,GAAE,CAACtB,IACCa,EAAL,CAGA,IAAQU,EAASV,EAATU,KACR,OAAoB,IAAhBA,EAAKC,QACA,+DAEF,SAAC,EAAD,CAAU7B,KAAM4B,GALtB,CAMF,C","sources":["API/fetchMovies.js","pages/MovieDetails/Cast/CastList.jsx","pages/MovieDetails/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst apiKey = '78b03767048a6745695471bf0cbbdec0';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendings = async () => {\n  const searchString = `trending/movie/day?api_key=${apiKey}`;\n  const { data } = await axios.get(searchString);\n  return data;\n};\n\nexport const fetchMoviesByQuery = async (query, signal) => {\n  const searchString = `search/movie?api_key=${apiKey}&query=${query}`;\n  const { data } = await axios.get(searchString, { signal });\n  return data;\n};\n\nexport const fetchMovieDetails = async (movieId, signal) => {\n  const searchString = `movie/${movieId}?api_key=${apiKey}`;\n  const { data } = await axios.get(searchString, { signal });\n  return data;\n};\n\nexport const fetchCasts = async (movieId, signal) => {\n  const searchString = `/movie/${movieId}/credits?api_key=${apiKey}`;\n  const { data } = await axios(searchString, { signal });\n  return data;\n};\n\nexport const fetchReviews = async (movieId, signal) => {\n  const searchString = `/movie/${movieId}/reviews?api_key=${apiKey}&append_to_response=reviews`;\n  const { data } = await axios.get(searchString, { signal });\n  return data;\n};\n","const CastList = ({ data }) => {\n  console.log('data', data);\n  const baseUrl = 'https://image.tmdb.org/t/p/';\n  const size = 'w300/';\n  return (\n    <ul>\n      {data.map(({ name, character, profile_path }) => (\n        <li key={name}>\n          <img src={`${baseUrl}/${size}/${profile_path}`} alt={name} />\n          <p>{name}</p>\n          <p>Character: {character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default CastList;\n","import { useEffect, useState } from 'react';\nimport { fetchCasts } from '../../../API/fetchMovies';\nimport { useParams } from 'react-router-dom';\nimport CastList from './CastList';\n\nexport const Cast = () => {\n  const [casts, setCasts] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n    try {\n      fetchCasts(movieId, signal).then(setCasts).catch(console.log);\n    } catch (error) {\n      console.log(error);\n    }\n    return () => controller.abort();\n  }, [movieId]);\n  if (!casts) {\n    return;\n  }\n  const { cast } = casts;\n  if (cast.length === 0) {\n    return <p>We don't have cast for this movie.</p>;\n  }\n  return <CastList data={cast} />;\n};\n"],"names":["apiKey","axios","fetchTrendings","searchString","data","fetchMoviesByQuery","query","signal","fetchMovieDetails","movieId","fetchCasts","fetchReviews","console","log","map","name","character","profile_path","src","alt","Cast","useState","casts","setCasts","useParams","useEffect","controller","AbortController","then","catch","error","abort","cast","length"],"sourceRoot":""}